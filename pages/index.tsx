import React, { FormEvent, useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Pagination from "../components/Pagination";
import { args } from "../config/api";
import { APIResponseType } from "../interfaces/ResponseApi";

type AnimeDataType = {
  images: {
    jpg: {
      image_url: string,
    },
  },
  score: number
}

interface IPropsComponent {
  list: AnimeDataType[];
  page: number;
  total_pages: number;
  search: boolean;
  searchParam: string;
}

const Home = ({ list, page, total_pages, searchParam }: IPropsComponent) => {
  const [data, setData] = useState<any[]>([]);
  const router = useRouter();

  const [search, setSearch] = useState('');

  const [result, setResult] = useState<undefined | string>(undefined);

  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {
    
    if (search) {
      
      return router.push(`?search=${search}&page=${value}`);
    } else {
      
      return router.push(`?page=${value}`);
    }
  };

  
  async function handleSearchMovie(e: FormEvent<HTMLFormElement>) {
    
    e.preventDefault();
    
    return router.push(`/?search=${search}&page=1`);
  }

  useEffect(() => {
    console.log(searchParam)
    
    setData(list);
    
    setResult(searchParam);
  }, [list, searchParam]);

  return (
    <div className={styles.container}>
      <Head>
        <title>NextJs Movies DB</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div className={styles.formSearch}>
          <form onSubmit={handleSearchMovie}>
            <input
              type="text"
              placeholder="Procure por um filme, série..."
              onChange={(e) => setSearch(e.target.value)}
            />
            <button type="submit">Pesquisar</button>
          </form>
        </div>
        <div className={styles.titleContainer}>
          {result ? (
            <h1>Resultados de busca para: {`${result}`}</h1>
          ) : (
            <h1>Animes Populares</h1>
          )}
        </div>
        <div className={styles.animesContainer}>
          {data.map((item: AnimeDataType, index: number) => (
            <div key={index}>
              <Image
                src={item.images.jpg.image_url}
                alt="image movie"
                width={350}
                height={400}
              />
              <div>
                {item.score ? (
                  <p>
                    Nota: <span>{item.score}</span>
                  </p>
                ) : (
                  <p>
                    Nota: <span>Sem avaliação</span>
                  </p>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
      <div className={styles.paginationContainer}>
        <Pagination
          total_pages={total_pages}
          page={page}
          handleChange={handleChange}
        />
      </div>
    </div>
  );
};

export default Home;


export async function getServerSideProps({
  query, 
}: {
  query: {
    page?: string; 
    search?: string; 
  };
}) {
  let URL = `${args.base_url}/anime?`

  if (query.search) {
    URL += `q=${query.search}&`
  }

  URL += `page=${query.page ? query.page : 1 }`

  const response = await fetch(URL);

  const { data: list, pagination } = (await response.json()) as APIResponseType;

  let total_pages = 1
  let page = 1

  if('current_page' in pagination) {
    page = Number(pagination && 'current_page' in pagination ? pagination.current_page : 1)
  }

  if('items' in pagination && 'current_page' in pagination) {
    const total = Number(pagination.items.total)
    const count = Number(pagination.items.count)

    total_pages = Math.round(total / count)
  }

  return {
    props: {
      list,
      page,
      total_pages,
      searchParam: query.search || "",
    },
  };
}
